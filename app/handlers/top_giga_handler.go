package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TopGigaStruct struct {
	ID      int    `db:"handsome_count"`
	Data    string `db:"pen_name"`
	Comment string
}

// TopGiga –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—Ç–æ–ø –≥–∏–≥–∞—á–∞–¥"
func TopGiga(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ –≥–∏–≥–∞—á–∞–¥–∞–º
	stmt, err := db.Prepare(`
		SELECT handsome_count, pen_name 
		FROM pens 
		WHERE tg_chat_id = ? 
		ORDER BY handsome_count DESC 
		LIMIT 10
	`)
	if err != nil {
		log.Printf("Error preparing query statement: %v", err)
		return
	}
	defer stmt.Close()

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	rows, err := stmt.Query(chatID)
	if err != nil {
		log.Printf("Error querying top gigachat: %v", err)
		return
	}
	defer rows.Close()

	var records []TopGigaStruct
	uniqueComments := []string{"–ê–ª—å—Ñ–∞ —Å–∞–º–µ—Ü üí™üòé", "–ß–µ—Ç–∫–∏–π –ø–∞—Ü–∞–Ω üê∫"}
	commonComment := "–ü–æ—Ö–æ–∂ –Ω–∞ –ø–∏–¥–æ—Ä–∞ ü§°"

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
	for i := 0; rows.Next(); i++ {
		var record TopGigaStruct
		if err := rows.Scan(&record.ID, &record.Data); err != nil {
			log.Printf("Error scanning row: %v", err)
			return
		}

		// –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
		if i < 2 {
			record.Comment = uniqueComments[i]
		} else {
			record.Comment = commonComment
		}

		records = append(records, record)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
	var sb strings.Builder
	sb.WriteString("–¢–æ–ø 10 –≥–∏–≥–∞—á–∞–¥–æ–≤:\n")
	for _, record := range records {
		sb.WriteString(fmt.Sprintf("@%s: %d —Ä–∞–∑. %s\n", record.Data, record.ID, record.Comment))
	}

	message := sb.String()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := tgbotapi.NewMessage(chatID, message)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
