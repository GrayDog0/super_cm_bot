package app

import (
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleBotAddition –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —á–∞—Ç
func HandleBotAddition(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.MyChatMember.NewChatMember.User.UserName == bot.Self.UserName {
		if update.MyChatMember.Chat.IsGroup() || update.MyChatMember.Chat.IsSuperGroup() {
			log.Printf("Bot added to group: %s", update.MyChatMember.Chat.Title)
			// sendMessage(update.MyChatMember.Chat.ID, "–ó–¥–∞—Ä–æ–≤–∞! –Ø –≤–∞—à –Ω–æ–≤—ã–π –ø–∞–ø–æ—á–∫–∞ üòà –ñ–º—è–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—Å—ã–ª–∫–æ: /pen", bot, 0)
		} else if update.MyChatMember.Chat.IsPrivate() {
			log.Printf("Bot added to private chat with: %s", update.MyChatMember.From.UserName)
			// sendMessage(update.MyChatMember.Chat.ID, "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.", bot, 0)
		}
	}

	if update.Message.GroupChatCreated {
		log.Printf("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç: %s", update.Message.Chat.Title)
		// sendMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–æ–≤—ã–π –±–æ—Ç. –ñ–º—è–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—Å—ã–ª–∫–æ: /pen", bot, 0)
	}
}

// HandleSpin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—Å–ø–∏–Ω"
func HandleSpin(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ–Ω–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	var currentSize int
	var lastUpdate sql.NullTime
	err := db.QueryRow("SELECT pen_length, pen_last_update_at FROM pens WHERE tg_pen_id = ? AND tg_chat_id = ?", userID, chatID).Scan(&currentSize, &lastUpdate)
	if err != nil {
		if err == sql.ErrNoRows {
			// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			RegisterBot(update, bot, db, true)
			return
		}
		log.Printf("Error querying pen size: %v", err)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	if lastUpdate.Valid {
		duration := time.Since(lastUpdate.Time)
		if duration.Seconds() < 24 {
			// sendMessage(chatID, "–ú–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–æ –≥—É–±–∞–º –ø–æ–≤–æ–¥–∏—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ...", bot, update.Message.MessageID)
			return
		}
	}

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏–Ω–∞
	pen := pen{Size: currentSize}
	result := SpinpenSize(pen)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ–Ω–∏—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	newSize := currentSize + result.Size
	_, err = db.Exec("UPDATE pens SET pen_length = ?, pen_last_update_at = ? WHERE tg_pen_id = ? AND tg_chat_id = ?", newSize, time.Now(), userID, chatID)
	if err != nil {
		log.Printf("Error updating pen size and last update time: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	// var responseText string
	// switch result.ResultType {
	// case "ADD":
	// 	switch result.Size {
	// 	case 1:
	// 		responseText = fmt.Sprintf("+1 –∏ –≤—Å–µ. –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case 2:
	// 		responseText = fmt.Sprintf("+2 —ç—Ç–æ —É–∂–µ –ª—É—á—à–µ —á–µ–º +1 ü§° –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case 3:
	// 		responseText = fmt.Sprintf("+3 –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∏–¥–µ—à—å?üçÜ –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case 4:
	// 		responseText = fmt.Sprintf("+4 –≤–æ—É —á–µ–ª! –Ø —Å–º–æ—Ç—Ä—é —Ç—ã –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –¥–µ–ª—É —Å–µ—Ä—å–µ–∑–Ω–æ üòé –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case 5:
	// 		responseText = fmt.Sprintf("–≠—Ç–æ RAMPAGEüî• +5 –ê–£–§ –≤–æ–ª—á–∞—Ä–∞ üê∫ –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	}
	// case "DIFF":
	// 	switch result.Size {
	// 	case -1:
	// 		responseText = fmt.Sprintf("-1 —Ç—ã —á—ë –ø–∏–¥—Ä? –î–∞ —è —à—É—á—É. –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case -2:
	// 		responseText = fmt.Sprintf("-2 –Ω–µ –≤–µ–ª–∏–∫–∞ –ø–æ—Ç–µ—Ä—è –±—Ä–æ ü•∏ –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case -3:
	// 		responseText = fmt.Sprintf("-3 —ç—Ç–æ —Ö—É–∂–µ —á–µ–º +1 ü§° –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case -4:
	// 		responseText = fmt.Sprintf("-4 –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –¥–æ —Å–≤–∞–¥—å–±—ã –æ—Ç—Ä–∞—Å—Ç–µ—Ç ü§• –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	case -5:
	// 		responseText = fmt.Sprintf("–£ —Ç–µ–±—è -5 –ø–µ—Ç—É—à–∞—Ä–∞üêì –ò —è –Ω–µ —à—É—á—É. –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º", newSize)
	// 	}
	// case "RESET":
	// 	responseText = "–¢–µ–ø–µ—Ä—å —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–µ–∑–¥–∞. –¢–≤–æ–π —Å–∞–π–∑: zero —Å–º"
	// case "ZERO":
	// 	responseText = "–ß–µ–µ–µ–µ–ª... —É —Ç–µ–±—è 0 —Å–º –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å. –¢–≤–æ–π —Å–∞–π–∑: %d —Å–º"
	// }

	// sendMessage(chatID, responseText, bot, update.Message.MessageID)
}

// ChooseGiga –≤—ã–±–∏—Ä–∞–µ—Ç "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞"
func ChooseGiga(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	var lastUpdate sql.NullTime
	err := db.QueryRow("SELECT MAX(handsome_last_update_at) FROM pens WHERE tg_chat_id = ?", chatID).Scan(&lastUpdate)
	if err != nil {
		log.Printf("Error querying last update time: %v", err)
		return
	}

	if lastUpdate.Valid {
		duration := time.Since(lastUpdate.Time)
		if duration.Seconds() < 24 {
			// sendMessage(chatID, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.", bot, update.Message.MessageID)
			return
		}
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö pen_name –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	penNames, err := GetPenNames(db)
	if err != nil {
		log.Printf("Error getting pen names: %v", err)
		return
	}

	for _, penName := range penNames {
		log.Printf("Pen Name: %v", penName)
	}

	// if len(penNames) <= 1 {
	// 	sendMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–µ–Ω–∏—Å–æ–≤ –≤ —á–∞—Ç–µ!", bot, update.Message.MessageID)
	// 	return
	// }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ penNames –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Member
    members, err := GetPenNames(db)
    if err != nil {
        log.Printf("Error getting pen names: %v", err)
        return
    }

	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	randomMember := SpinunhandsomeOrGiga(members)

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ–Ω–∏—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    var currentSize int
    err = db.QueryRow("SELECT pen_length FROM pens WHERE tg_pen_id = ? AND tg_chat_id = ?", randomMember.ID, chatID).Scan(&currentSize)
    if err != nil {
        if err == sql.ErrNoRows {
            log.Printf("No pen size found for tg_pen_id: %d in chat_id: %d", randomMember.ID, chatID)
        } else {
            log.Printf("Error getting current pen size: %v", err)
        }
        return
    }
    log.Printf("Current pen size for tg_pen_id %d in chat_id %d: %d", randomMember.ID, chatID, currentSize)

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
	result := SpinAddpenSize(pen{Size: currentSize})
	newSize := currentSize + result.Size

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É –≤—ã–∏–≥—Ä–∞–≤—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	_, err = db.Exec("UPDATE gigas SET giga_count = giga_count + 1 WHERE tg_pen_id = ? AND tg_chat_id = ?", newSize, randomMember.Name, chatID)
	if err != nil {
		log.Printf("Error updating giga count: %v", err)
		return
	}

	_, err = db.Exec("UPDATE gigas SET handsome_last_update_at = ? WHERE tg_chat_id = ?", time.Now(), chatID)
	if err != nil {
		log.Printf("Error updating last update time: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞"
	// sendMessage(chatID, fmt.Sprintf("–í–æ—É –≤–æ—É –≤–æ—É –ø–∞–ø—Ä–∏–≤–µ—Ç—Å–≤—É–π—Ç–µ —Ö–∞—Å–∞–Ω—á–∏–∫–∞ @%s!üî•–¢–≤–æ–π —á–ª–µ–Ω —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %d —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %d —Å–º.", randomMember.Name, result.Size, newSize), bot, update.Message.MessageID)
}


// ChooseUnhandsome –≤—ã–±–∏—Ä–∞–µ—Ç "–∞–Ω—Ç–∏–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞"
func ChooseUnhandsome(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	var lastUpdate sql.NullTime
	err := db.QueryRow("SELECT MAX(unhandsome_last_update_at) FROM pens WHERE tg_chat_id = ?", chatID).Scan(&lastUpdate)
	if err != nil {
		log.Printf("Error querying last update time: %v", err)
		return
	}

	if lastUpdate.Valid {
		duration := time.Since(lastUpdate.Time)
		if duration.Seconds() < 24*60*60 {
			// sendMessage(chatID, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞.", bot, update.Message.MessageID)
			return
		}
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö pen_name –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	penNames, err := GetPenNames(db)
	if err != nil {
		log.Printf("Error getting pen names: %v", err)
		return
	}

	for _, penName := range penNames {
		log.Printf("Pen Name: %v", penName)
	}

	// if len(penNames) <= 1 {
	// 	sendMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–µ–Ω–∏—Å–æ–≤ –≤ —á–∞—Ç–µ!", bot, update.Message.MessageID)
	// 	return
	// }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ penNames –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Member
    members, err := GetPenNames(db)
    if err != nil {
        log.Printf("Error getting pen names: %v", err)
        return
    }

	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	randomMember := SpinunhandsomeOrGiga(members)

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ–Ω–∏—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    var currentSize int
    err = db.QueryRow("SELECT pen_length FROM pens WHERE tg_pen_id = ? AND tg_chat_id = ?", randomMember.ID, chatID).Scan(&currentSize)
    if err != nil {
        if err == sql.ErrNoRows {
            log.Printf("No pen size found for tg_pen_id: %d in chat_id: %d", randomMember.ID, chatID)
        } else {
            log.Printf("Error getting current pen size: %v", err)
        }
        return
    }
    log.Printf("Current pen size for tg_pen_id %d in chat_id %d: %d", randomMember.ID, chatID, currentSize)

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
	result := SpinAddpenSize(pen{Size: currentSize})
	newSize := currentSize - result.Size

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É –≤—ã–∏–≥—Ä–∞–≤—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	_, err = db.Exec("UPDATE gigas SET unhandsome_count = unhandsome_count + 1 WHERE tg_user_name = ? AND tg_chat_id = ?", newSize, randomMember.Name, chatID)
	if err != nil {
		log.Printf("Error updating unhandsome count: %v", err)
		return
	}

	_, err = db.Exec("UPDATE gigas SET unhandsome_last_update_at = ? WHERE tg_chat_id = ?", time.Now(), chatID)
	if err != nil {
		log.Printf("Error updating last update time: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ "–∞–Ω—Ç–∏–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞"
	// sendMessage(chatID, fmt.Sprintf("–ü—É—Å—Ç—å –ø–∏–¥–æ—Ä–æ–º –±—É–¥–µ—Ç @%s! –¢–≤–æ–π a —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ –Ω–∞ %d —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %d —Å–º.", randomMember.Name, result.Size, newSize), bot, update.Message.MessageID)
}

// TopLength –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—Ç–æ–ø –¥–ª–∏–Ω"
func TopLength(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ –¥–ª–∏–Ω–µ
	rows, err := db.Query("SELECT pen_name, pen_length FROM pens WHERE tg_chat_id = ? ORDER BY pen_length DESC LIMIT 10", chatID)
	if err != nil {
		log.Printf("Error querying top length: %v", err)
		return
	}
	defer rows.Close()

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
	var sb strings.Builder
	sb.WriteString("–¢–æ–ø 10 –ø–æ –¥–ª–∏–Ω–µ –ø–µ–Ω–∏—Å–∞:\n")
	for rows.Next() {
		var name string
		var length int
		if err := rows.Scan(&name, &length); err != nil {
			log.Printf("Error scanning row: %v", err)
			return
		}
		sb.WriteString(fmt.Sprintf("%s: %d —Å–º\n", name, length))
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	// sendMessage(chatID, sb.String(), bot, update.Message.MessageID)
}

// TopGiga –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—Ç–æ–ø –≥–∏–≥–∞—á–∞—Ç"
func TopGiga(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ –≥–∏–≥–∞—á–∞—Ç–∞–º
	rows, err := db.Query("SELECT pen_name, handsome_count FROM pens WHERE tg_chat_id = ? ORDER BY handsome_count DESC LIMIT 10", chatID)
	if err != nil {
		log.Printf("Error querying top gigachat: %v", err)
		return
	}
	defer rows.Close()

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
	var sb strings.Builder
	sb.WriteString("–¢–æ–ø 10 –≥–∏–≥–∞—á–∞—Ç–æ–≤:\n")
	for rows.Next() {
		var name string
		var count int
		if err := rows.Scan(&name, &count); err != nil {
			log.Printf("Error scanning row: %v", err)
			return
		}
		sb.WriteString(fmt.Sprintf("%s: %d —Ä–∞–∑\n", name, count))
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	// sendMessage(chatID, sb.String(), bot, update.Message.MessageID)
}

// Topunhandsome –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—Ç–æ–ø –ø–∏–¥–æ—Ä"
func TopUnhandsome(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ –ø–∏–¥–æ—Ä–∞–º
	rows, err := db.Query("SELECT pen_name, unhandsome_count FROM pens WHERE tg_chat_id = ? ORDER BY unhandsome_count DESC LIMIT 10", chatID)
	if err != nil {
		log.Printf("Error querying top unhandsome: %v", err)
		return
	}
	defer rows.Close()

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
	var sb strings.Builder
	sb.WriteString("–¢–æ–ø 10 –ø–∏–¥–æ—Ä–æ–≤:\n")
	for rows.Next() {
		var name string
		var count int
		if err := rows.Scan(&name, &count); err != nil {
			log.Printf("Error scanning row: %v", err)
			return
		}
		sb.WriteString(fmt.Sprintf("%s: %d —Ä–∞–∑\n", name, count))
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	// sendMessage(chatID, sb.String(), bot, update.Message.MessageID)
}

// HandlepenCommand —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ç–æ –ø–∏—à–µ—Ç –≤ —á–∞—Ç
func HandlepenCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	RegisterBot(update, bot, db, false)
}

// TODO: –æ—Å—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–±–∞–≤–∏–º —Ä—É–∫–∞–º–∏
